# Create a zoo object
NiftyIndices.z <- zoo(x = NiftyIndices.df$Close, order.by = NiftyIndices.df$Date)
#-*R*-
# Forecasting for the NiftyIndicesDataset
# First, load the dataset
NiftyIndices.df <- read.csv("../data/INDIAVIX.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a zoo object
NiftyIndices.z <- zoo(x = NiftyIndices.df$Close, order.by = NiftyIndices.df$Date)
# Framework to generally apply:
# 1: Visualize timeseries
#par(mfrow = c(1,1))
plot(NiftyIndices.z)
NiftyIndices.z
# Framework to generally apply:
# 1: Visualize timeseries
#par(mfrow = c(1,1))
plot(NiftyIndices.z)
# Create a zoo object
NiftyIndices.z <- zoo(x = NiftyIndices.df$Close, order.by = as.Date(NiftyIndices.df$Date))
NiftyIndices.z
# Framework to generally apply:
# 1: Visualize timeseries
#par(mfrow = c(1,1))
plot(NiftyIndices.z)
plot(NiftyIndices.z, main="NiftyIndeces value")
plot(NiftyIndices.z, main="NiftyIndices value")
?par
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1), bg = "red")
plot(NiftyIndices.z, main="NiftyIndices value")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1), bg = "gray")
plot(NiftyIndices.z, main="NiftyIndices value")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1), bg = "light")
plot(NiftyIndices.z, main="NiftyIndices value")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1), grid=TRUE)
plot(NiftyIndices.z, main="NiftyIndices value")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1))
plot(NiftyIndices.z, main="NiftyIndices value")
#-*R*-
# Forecasting for the NiftyIndicesDataset
# First, load the dataset
NiftyIndices.df <- read.csv("../data/INDIAVIX.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a zoo object
NiftyIndices.z <- zoo(x = NiftyIndices.df$Close, order.by = as.Date(NiftyIndices.df$Date))
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1))
plot(NiftyIndices.z, main="NiftyIndices value")
# 2: Make the time series stationary
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,1), bg = "white")
plot(NiftyIndices.z, main="NiftyIndices value")
plot(log(NiftyIndices.z), man="Log")
plot(NiftyIndices.z, main="NiftyIndices value")
plot(log(NiftyIndices.z), man="Log")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,2), bg = "white")
plot(NiftyIndices.z, main="NiftyIndices value")
plot(log(NiftyIndices.z), man="Log")
plot(log(NiftyIndices.z), main="Log")
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,2), bg = "white")
plot(NiftyIndices.z, main="NiftyIndices value")
plot(log(NiftyIndices.z), main="Log")
# 2: Make the time series stationary
# Augmented Dickey Fuller
tseries::adf.test(log(NiftyIndices.z))
# 2: Make the time series stationary
# Augmented Dickey Fuller
tseries::adf.test(log(NiftyIndices.z), alternative = "stationary", k=0)
# 2: Make the time series stationary
# Augmented Dickey Fuller
tseries::adf.test(log(NiftyIndices.z), alternative = "stationary")
# 2: Make the time series stationary
# Augmented Dickey Fuller
tseries::adf.test(log(NiftyIndices.z), alternative = "stationary", k=0)
# 3: plot ACF  (AutoCorrolationFunction) / PACF (PartialAutoCorrelationFunction)
par(mfrow = c(1,2))
acf(NiftyIndices.z)
acf(log(NiftyIndices.z)
acf(log(NiftyIndices.z))
acf(NiftyIndices.z)
acf(NiftyIndices.z, na.action = na.omit)
acf(NiftyIndices.z, na.action = na.pass)
acf(log(NiftyIndices.z), na.action = na.pass)
pacf(log(NiftyIndices.z), na.action = na.pass)
# 3: plot ACF  (AutoCorrolationFunction) / PACF (PartialAutoCorrelationFunction)
par(mfrow = c(1,2))
acf(log(NiftyIndices.z), na.action = na.pass)
pacf(log(NiftyIndices.z), na.action = na.pass)
acf(log(NiftyIndices.z), na.action = na.pass, main = "AC")
pacf(log(NiftyIndices.z), na.action = na.pass, main = "PAC")
# Since it is nor stationary, lets try diff
par(mfrow = c(1,2))
# Since it is nor stationary, lets try diff
par(mfrow = c(1,2))
acf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "diff AC")
pacf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "dff PAC")
#-----------------------------
# 3: plot ACF and PACF
par(mfrow=c(1,2))
acf(log(AirPassengers), main="AutoCorrelation")
pacf(log(AirPassengers), main="Partial AutoCorrelation")
# Noticing that ACF does not decrease quickly, so not stationary 'enough'
# Need to regress to the mean
# ACF and PACF on diff
par(mfrow=c(1,2))
acf(diff(log(AirPassengers)), main="ACF on difference on log")
pacf(diff(log(AirPassengers)), main="PACF on difference on log")
# 3: plot ACF  (AutoCorrolationFunction) / PACF (PartialAutoCorrelationFunction)
# Check Autocorrolation first
par(mfrow = c(1,2))
acf(log(NiftyIndices.z), na.action = na.pass, main = "AC")
pacf(log(NiftyIndices.z), na.action = na.pass, main = "PAC")
# Since it is nor stationary, lets try diff
par(mfrow = c(1,2))
acf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "diff AC")
pacf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "dff PAC")
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z)), c(1, 1, 1), seasonal = c(1, 1, 1))
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(1, 1, 1), seasonal = c(1, 1, 1))
pred <- predict(fit, n.ahead = 30)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(1, 1, 1), seasonal = c(1, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 30)
par(mfrow=c(1,1))
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 10 years ahead")
# 5: Make the predictions
pred <- predict(fit, n.ahead = 3)
par(mfrow=c(1,1))
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 10 years ahead")
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(1, 1, 1), seasonal = c(1, 1, 1))
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 3)
par(mfrow=c(1,1))
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 10 years ahead")
pred
pred$pred
# 5: Make the predictions
pred <- predict(ets(fit), n.ahead = 3)
DF <- as.data.frame(pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
zoo(DF, as.Date(as.numeric(rownames(DF))))
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
par(mfrow=c(1,1))
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
pred
pred$pred
tail(NiftyIndices.z, 1)
index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))) + end)
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
zoo.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
# 5: Make the predictions
pred <- predict(fit, n.ahead = 10)
DF <- as.data.frame(pred)
end <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))) + end)
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))) + endDate)
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 100)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 100 days ahead")
# 5: Make the predictions
pred <- predict(fit, n.ahead = 1000)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 100 days ahead")
# 5: Make the predictions
pred <- predict(fit, n.ahead = 100)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 10)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 100 days ahead")
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 2, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 10)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
pred <- predict(fit, n.ahead = 10)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))))
pred$pred
par(mfrow=c(1,1))
plot(exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 100 days ahead")
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
pred <- zoo(DF, as.Date(as.numeric(rownames(DF))) + end)
end + 10
end <- index(tail(NiftyIndices.z, 1))
end + 10
end
pred <- zoo(DF, c(end, end + ahead))
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
end <- index(tail(NiftyIndices.z, 1))
pred <- zoo(DF, c(end, end + ahead))
pred$pred
pred <- zoo(DF, serialize(end, end + ahead))
pred <- zoo(DF, tf(end, end + ahead))
pred <- zoo(DF, seq(end, end + ahead))
pred <- zoo(DF, seq(from=endDate, to=endDate+ahead))
pred <- zoo(DF, seq(from=endDate, to=endDate+ahead, along.with = ahead))
pred$pred
pred
pred$pred
seq(from=endDate, to=endDate+ahead, along.with = ahead)
seq(from=endDate, to=endDate+ahead, along.with = 10)
seq(from=endDate, to=endDate+ahead, along.with = 100)
seq(from=endDate, to=endDate+ahead, "days")
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate, to=endDate+ahead, along.with = ahead))
pred$pred
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
par(mfrow=c(1,1))
ts.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
pred
plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
zoo.plot(NiftyIndices.z, exp(1)^pred$pred, log = "y", lty=c(1,3), main="Prediction 3 days ahead")
plot(NiftyIndices.z)
plot(pred$pred)
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(1, 1, 1), seasonal = c(1, 1, 1))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(1, 2, 1), seasonal = c(1, 2, 1))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(3, 2, 1), seasonal = c(3, 2, 1))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(2, 2, 2), seasonal = c(2, 2, 2))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(2, 2, 0), seasonal = c(2, 2, 0))
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(2, 2, 1), seasonal = c(2, 2, 1))
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(2, 3, 1), seasonal = c(2, 3, 1))
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(0, 1, 1), seasonal = c(0, 1, 1))
# 5: Make the predictions
ahead = 10
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))
pred
par(mfrow=c(1,1))
plot(pred$pred)
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
plot(pred)
P <- 1
I <- 1
Q <- 1
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
P <- 10
I <- 1
Q <- 1
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
P <- 10
I <- 10
Q <- 10
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
P <- 1
I <- 0
Q <- 0
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
P <- 2
I <- 0
Q <- 0
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
#-*R*-
# Forecasting for the NiftyIndicesDataset
# First, load the dataset
NiftyIndices.df <- read.csv("../data/INDIAVIX.csv", header = TRUE, stringsAsFactors = FALSE)
# Create a zoo object
NiftyIndices.z <- zoo(x = NiftyIndices.df$Close, order.by = as.Date(NiftyIndices.df$Date))
# Framework to generally apply:
# 1: Visualize timeseries
par(mfrow = c(1,2), bg = "white")
plot(NiftyIndices.z, main="NiftyIndices value")
plot(log(NiftyIndices.z), main="Log")
# 2: Make the time series stationary
# Augmented Dickey Fuller
tseries::adf.test(log(NiftyIndices.z), alternative = "stationary", k=0)
# 3: plot ACF  (AutoCorrolationFunction) / PACF (PartialAutoCorrelationFunction)
# Check Autocorrolation first
par(mfrow = c(1,2))
acf(log(NiftyIndices.z), na.action = na.pass, main = "AC")
pacf(log(NiftyIndices.z), na.action = na.pass, main = "PAC")
# Since it is nor stationary, lets try diff
par(mfrow = c(1,2))
acf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "diff AC")
pacf(diff(log(NiftyIndices.z)), na.action = na.pass, main = "dff PAC")
P <- 1
I <- 1
Q <- 4
# 4: Build ARIMA model (AutoRegressive Integration MovingAverage)
fit <- arima(log(NiftyIndices.z), c(P, I, Q), seasonal = c(P, I, Q))
# 5: Make the predictions
ahead = 100
pred <- predict(fit, n.ahead = 3)
DF <- as.data.frame(pred)
endDate <- index(tail(NiftyIndices.z, 1))
seq(from=endDate + 1, to=endDate+ahead, "days")
pred <- zoo(DF, seq(from=endDate + 1, to=endDate+ahead, "days"))$pred
par(mfrow=c(1,1))
plot(pred)
